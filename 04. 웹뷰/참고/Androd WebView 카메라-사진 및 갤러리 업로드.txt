Androd WebView 카메라-사진 및 갤러리 업로드
------------------------------------------
    - minSdkVersion 26 / targetSdkVersion 30 / compileSdkVersion 30

    * src/main/res/xml/file_paths.xml
    -----------------------------------------------------------------
    <?xml version="1.0" encoding="utf-8"?>
    <paths xmlns:android="http://schemas.android.com/apk/res/android">
        <external-path
            name="external_files"
            path="." />
    </paths>
    -----------------------------------------------------------------

	* mainfests/AndroidManifest.xml
	-----------------------------------------------------------------
    ...
        <provider
            android:authorities="${applicationId}.provider"
            android:name="androidx.core.content.FileProvider"
            android:exported="false"
            android:grantUriPermissions="true">
            <meta-data android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/file_paths"/>
        </provider>
    </application>

    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />

    <!-- Android 11 -->
    <uses-permission android:name="android.permission.MANAGE_EXTERNAL_STORAGE" />
	-----------------------------------------------------------------

    * src/main/java/com/example/mytest/util/WebViewCameraUtil.java
    -----------------------------------------------------------------
    04. 웹뷰/유틸/WebViewCameraUtil.java
    -----------------------------------------------------------------

    * src/main/java/com/example/mytest/MainActivity.java
    -----------------------------------------------------------------
    private static final String TAG = "***MainActivity";

    private WebView webView;
    private WebSettings webSettings;

    public ValueCallback<Uri[]> filePathCallbackLollipop;
    public final static int FILECHOOSER_LOLLIPOP_REQ_CODE = 2002;
    private Uri cameraImageUri = null;

    public static final int CAMERA_ENABLE_REQUEST_CODE = 1;
    public static final int EXTERNAL_STORAGE_ENABLE_REQUEST_CODE = 2;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        this.checkPermission( getApplicationContext() );

        webView = findViewById(R.id.webView);
        webSettings = webView.getSettings();

        WebViewSettingUtil.setSettingTotal(webSettings);

        webView.setWebChromeClient(new WebChromeClient() {
            @Override
            public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams) {
                // Callback 초기화
                if ( filePathCallbackLollipop != null ) {
                    filePathCallbackLollipop.onReceiveValue(null);
                    filePathCallbackLollipop = null;
                }
                filePathCallbackLollipop = filePathCallback;

                String acceptType = fileChooserParams.getAcceptTypes()[0];
                boolean isCapture = fileChooserParams.isCaptureEnabled();
                
                Log.d(TAG, "fileChooserParams - acceptType : " + acceptType);
                Log.d(TAG, "fileChooserParams - isCapture : " + isCapture);

                if ( "image/*".equals(acceptType) ) {
                    WebViewCameraUtil.getInstance().setContext( getApplicationContext() );
                    cameraImageUri = WebViewCameraUtil.getInstance().runCameraImage( isCapture, MainActivity.this, FILECHOOSER_LOLLIPOP_REQ_CODE );
                } else {
                    // TODO : video/*, audio/*

                    String sMsg = "준비중입니다~ 쉬운게 아니에요~\n다시 누르면 죽으니까 강제로 죽일게요~^^ 즐~";
                    Toast.makeText(getApplicationContext(), sMsg, Toast.LENGTH_LONG).show();

                    try {
                        Thread.sleep(1000);

                        FinishRestartUtil.getInstance().completelyExit( MainActivity.this, getApplicationContext() );

                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    /*
                        return false 안하면 다른 기능도 반응이 없음
                        java.lang.IllegalStateException: Duplicate showFileChooser result
                     */
                    return false;
                }

                return true;
            }
        });

        webView.setWebViewClient(new WebViewClient());

        webView.loadUrl("https://test-a9f7e.web.app/mobile_etc.html");
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        switch (requestCode) {
            case FILECHOOSER_LOLLIPOP_REQ_CODE:
                if ( resultCode == RESULT_OK ) {
                    if ( filePathCallbackLollipop == null ) return;
                    if ( data == null ) {
                        data = new Intent();
                    }
                    if ( data.getData() == null ) {
                        data.setData(cameraImageUri);
                    }

                    Log.d(TAG, "cameraImageUri : " + cameraImageUri);

                    filePathCallbackLollipop.onReceiveValue(WebChromeClient.FileChooserParams.parseResult(resultCode, data));
                    filePathCallbackLollipop = null;
                } else {
                    if ( filePathCallbackLollipop != null ) {
                        filePathCallbackLollipop.onReceiveValue(null);
                        filePathCallbackLollipop = null;
                    }
                }
                break;
            default:
                break;
        }

        super.onActivityResult(requestCode, resultCode, data);
    }

    public void checkPermission(Context context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            // Android 11
            if (!Environment.isExternalStorageManager()) {
                Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);

                Uri uri = Uri.fromParts("package", context.getPackageName(), null);
                intent.setData(uri);
                this.startActivity(intent);
            }
        } else {
            // below Android 11
            if (ActivityCompat.checkSelfPermission(context, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED ||
                    ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {

                String[] permissions = { Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE };
                ActivityCompat.requestPermissions(this, permissions, EXTERNAL_STORAGE_ENABLE_REQUEST_CODE);
            }
        }

        if ( ActivityCompat.checkSelfPermission(context, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED ) {

            String[] permissions = { Manifest.permission.CAMERA };
            ActivityCompat.requestPermissions(this, permissions, CAMERA_ENABLE_REQUEST_CODE);
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        if ( Build.VERSION.SDK_INT < Build.VERSION_CODES.R ) {
            // below Android 11
            if ( requestCode == EXTERNAL_STORAGE_ENABLE_REQUEST_CODE ) {
                if ( grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    Toast.makeText(getApplicationContext(), "앱 실행을 위한 저장공간 권한이 설정 되었습니다.", Toast.LENGTH_LONG).show();
                } else {
                    Toast.makeText(getApplicationContext(), "앱 실행을 위한 저장공간 권한이 취소 되었습니다.", Toast.LENGTH_LONG).show();

                    try {
                        Thread.sleep(2000);

                        FinishRestartUtil.getInstance().completelyExit( this, getApplicationContext() );

                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        if ( requestCode == CAMERA_ENABLE_REQUEST_CODE ) {
            if ( grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(getApplicationContext(), "앱 실행을 위한 카메라 권한이 설정 되었습니다.", Toast.LENGTH_LONG).show();
            } else {
                Toast.makeText(getApplicationContext(), "앱 실행을 위한 카메라 권한이 취소 되었습니다.", Toast.LENGTH_LONG).show();

                try {
                    Thread.sleep(2000);

                    FinishRestartUtil.getInstance().completelyExit( this, getApplicationContext() );

                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    -----------------------------------------------------------------