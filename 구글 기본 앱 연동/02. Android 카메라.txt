Android 카메라
--------------------
    - minSdkVersion 26 / targetSdkVersion 30 / compileSdkVersion 30

	* src/main/AndroidManifest.xml
	-----------------------------------------------------------------
    <uses-permission android:name="android.permission.CAMERA" />
	-----------------------------------------------------------------

	* src/main/res/layout/activity_main.xml
	-----------------------------------------------------------------
    <Button
        android:id="@+id/btnImage"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="카메라 연동(이미지)"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <ImageView
        android:id="@+id/imageView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="50dp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        tools:srcCompat="@tools:sample/avatars" />

    <Button
        android:id="@+id/btnVideo"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="200dp"
        android:text="카메라 연동(동영상)"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <VideoView
        android:id="@+id/videoView"
        android:layout_width="wrap_content"
        android:layout_height="200dp"
        android:layout_marginTop="250dp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />
    -----------------------------------------------------------------

	* src/main/java/com/example/testapp/MainActivity.java
	-----------------------------------------------------------------

    private static final String TAG = "***MainActivity";

    private static final int CAMERA_ENABLE_REQUEST_CODE = 1;

    private ImageView imageView;
    private VideoView videoView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        this.checkPermission( getApplicationContext() );

        /*
            - 일단 기본만 실습
            - 추후 시간되고, 생각나고, 몸이 움직이면 추가 실습
                1) 내부/외부 저장소에 저장
                    : 구글링 (아래 내용하고는 다른거 같던데 아닌가??)

                2) 파일 공유 방법
                    https://github.com/kkangseongyun/kkangs_android/tree/master/PDF
                        14장 - Intent와 구글 기본 앱 연동.pdf
         */
        this.processImage();
        this.processVideo();
    }

    private void processImage() {
        imageView = findViewById(R.id.imageView);

        Button btnImage = findViewById(R.id.btnImage);
        btnImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                cameraImageResult.launch(intent);
            }
        });
    }

    ActivityResultLauncher<Intent> cameraImageResult = registerForActivityResult(
            new  ActivityResultContracts.StartActivityForResult(),
            new ActivityResultCallback<ActivityResult>() {
                @Override
                public void onActivityResult(ActivityResult result) {
                    if (result.getResultCode() == Activity.RESULT_OK) {
                        Bitmap bitmap = (Bitmap) result.getData().getExtras().get("data");
                        imageView.setImageBitmap(bitmap);
                    }
                }
            }
    );

    private void processVideo() {
        videoView = findViewById(R.id.videoView);

        Button btnVideo = findViewById(R.id.btnVideo);
        btnVideo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
                intent.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, 0);
                intent.putExtra(MediaStore.EXTRA_DURATION_LIMIT, 20);
                intent.putExtra(MediaStore.EXTRA_SIZE_LIMIT, 1024 * 1024 * 10);
                cameraVideoResult.launch(intent);
            }
        });
    }

    ActivityResultLauncher<Intent> cameraVideoResult = registerForActivityResult(
            new  ActivityResultContracts.StartActivityForResult(),
            new ActivityResultCallback<ActivityResult>() {
                @Override
                public void onActivityResult(ActivityResult result) {
                    if (result.getResultCode() == Activity.RESULT_OK) {
                        Log.d(TAG, "onActivityResult : " + result.getData().getData());
                        videoView.setVideoURI(Uri.parse(result.getData().getDataString()) );

                        final MediaController mediaController = new MediaController(MainActivity.this);
                        videoView.setMediaController(mediaController);

                        videoView.start();
                    }
                }
            }
    );

    public void checkPermission(Context context) {
        if ( ActivityCompat.checkSelfPermission(context, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED ) {

            String[] permissions = { Manifest.permission.CAMERA };
            ActivityCompat.requestPermissions(this, permissions, CAMERA_ENABLE_REQUEST_CODE);
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        if ( requestCode == CAMERA_ENABLE_REQUEST_CODE ) {
            if ( grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(getApplicationContext(), "앱 실행을 위한 카메라 권한이 설정 되었습니다.", Toast.LENGTH_LONG).show();
            } else {
                Toast.makeText(getApplicationContext(), "앱 실행을 위한 카메라 권한이 취소 되었습니다.", Toast.LENGTH_LONG).show();

                try {
                    Thread.sleep(2000);

                    FinishRestartUtil.getInstance().completelyExit( this, getApplicationContext() );

                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    -----------------------------------------------------------------